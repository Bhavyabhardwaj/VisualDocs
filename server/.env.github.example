# GitHub Integration Environment Variables

# Add these to your .env file for full GitHub integration functionality

# ===========================================
# GITHUB API CONFIGURATION
# ===========================================

# GitHub Personal Access Token (recommended for better rate limits)
# Without token: 60 requests/hour (public repos only)
# With token: 5,000 requests/hour (private repos if granted)
# 
# To create a token:
# 1. Go to GitHub Settings → Developer settings → Personal access tokens
# 2. Generate new token (classic)
# 3. Select scopes: 'public_repo' (or 'repo' for private repositories)
# 4. Copy the token and paste below
GITHUB_TOKEN=ghp_your_personal_access_token_here

# Alternative name (some prefer this naming convention)
# GITHUB_ACCESS_TOKEN=ghp_your_personal_access_token_here

# ===========================================
# IMPORT CONFIGURATION (optional)
# ===========================================

# Default maximum file size for imports (in MB)
DEFAULT_MAX_FILE_SIZE_MB=5

# Default maximum repository size for imports (in KB)
DEFAULT_MAX_REPO_SIZE_KB=500000

# Default batch size for file processing
GITHUB_IMPORT_BATCH_SIZE=10

# Default import timeout (in minutes)
GITHUB_IMPORT_TIMEOUT_MINUTES=10

# ===========================================
# RATE LIMITING CONFIGURATION (optional)
# ===========================================

# Minimum requests to keep as buffer when checking rate limits
GITHUB_RATE_LIMIT_BUFFER=10

# Delay between file processing batches (in milliseconds)
GITHUB_BATCH_DELAY_MS=100

# ===========================================
# SUPPORTED FILE EXTENSIONS (optional)
# ===========================================

# Comma-separated list of default file extensions to import
# If not specified, uses built-in defaults
# DEFAULT_FILE_EXTENSIONS=.js,.jsx,.ts,.tsx,.py,.java,.cpp,.c,.h,.hpp,.cs,.php,.rb,.go,.rs,.swift,.kt,.scala,.r,.sql,.json,.xml,.yaml,.yml,.toml,.ini,.cfg,.sh,.bash,.ps1,.bat,.dockerfile,.gitignore,.env.example

# ===========================================
# FRAMEWORK DETECTION PATTERNS (optional)
# ===========================================

# These are built into the service, but you can override if needed
# REACT_DETECTION_PATTERNS=package.json,react,jsx,tsx
# VUE_DETECTION_PATTERNS=package.json,vue,vue.config
# ANGULAR_DETECTION_PATTERNS=package.json,angular,angular.json
# DJANGO_DETECTION_PATTERNS=requirements.txt,django,settings.py
# SPRING_DETECTION_PATTERNS=pom.xml,build.gradle,spring